// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Table struct for Table
type Table struct {
	Columns            []Column               `json:"columns"`
}

// NewTable instantiates a new Table object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTable(columns []Column, id string, name string) *Table {
	this := Table{}
	return &this
}

// NewTableWithDefaults instantiates a new Table object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableWithDefaults() *Table {
	this := Table{}
	return &this
}


func (o Table) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	return json.Marshal(toSerialize)
}

type NullableTable struct {
	value *Table
	isSet bool
}

func (v NullableTable) Get() *Table {
	return v.value
}

func (v *NullableTable) Set(val *Table) {
	v.value = val
	v.isSet = true
}

func (v NullableTable) IsSet() bool {
	return v.isSet
}

func (v *NullableTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTable(val *Table) *NullableTable {
	return &NullableTable{value: val, isSet: true}
}

func (v NullableTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
